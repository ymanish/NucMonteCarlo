####sequences from the segal paper 2006
import numpy as np

c1 = 'CTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGCAAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGT'
c2 = 'CTGGAGATACCCGGTGCTAAGGCCGCTTAATTGGTCGTAGCAAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCTACCGCGTTTTAACCGCCAATAGGATTACTTACTAGTCTCTAGGCACGTGTAAGATATATACATCCTGT'
c3 = 'GTCGTAGCAAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCTACCGCGTTTTAACCGCCAATAGGATTACTTACTAG'

d1 = 'ATGGATCCTTGCAAGCTCTTGGTGCGCTTTTTCGGCTGTTGACGCCCTGTTCGGCAGTTTTTGCGCACCTTGAGCCCCCTCTCCGGAATTCAC'
d2 = 'ATGGATCCGCGCAAGCTCGCGGTGCGCTTAAACGGCTGGCGACGCCCTGGCCGGCAGTTTAAGCGCACCGCGAGCCCCCTCTCCGGAATTCAC'
d3 = 'ATGGATCCTCGCAAGCGAGCTTTGCTAGGCCCCGTCTGTCGCCTCACGGGACGGAAGGGGCCTAGCACAGCTCGCCCCCGCTCCGGAATTCAC'
d4 = 'ATGGATCCATGCAAGCTCATGGTGCGCAATTTCGGCTGATGACGCCCTGATCGGCAGAAATTGCGCACCATGAGCCCCCTCTCCGGAATTCAC'
d5 = 'ATGGATCCATGCAAGCTCATGGTGCGCCCGGGCGGCTGATGACGCCCTGATCGGCAGCCCGGGCGCACCATGAGCCCCCTCTCCGGAATTCAC'

e1 = 'CTGGAGAATCCCGGTGCCGAGGCCGCTCAATTGGTCGTAGCAAGCTCTAGCACCGCTTAAACGCACGTACGCGCTGTCCCCCGCGTTTTAACCGCCAAGGGGATTACTCCCTAGTCTCCAGGCACGTGTCAGATATATACATCCTGT'
e2 = 'ATGGATCCTAGCAAGCTCTAGGTGCGCTTAAACGGCTGTAGACGCCCTATCCTGTACGGCAGTTTAAGCGCACCTAGAGCCTCCGGAATTCAC'
e3 = 'ATGGATCCTAGCATACTCTAGGTTAGCTTAAACTACTGTAGACTTACTGTACGGCAGTTTAAGCTAACCTAGAGTACCCTCTCCGGAATTCAC'

rba = dict({
'c1': 1, 
'c2': 2.5,
'c3': 1.5,

'd1': 1,
'd2': .16,
'd3': .14,
'd4': .12,
'd5': .1,

'e1': 1, 
'e2': .15,
'e3': .1
})

pref = 'GAATTCGAGCTCGCCCGGCCGGGGATCGCTCGGG' 
endf = 'TGGATCTCTAGAGTCGACCTGCAGCCCAAGCTT'

### Sequences from the Shrader TE, Gothers paper 1989 

TG_1989 = pref+'TCGGTGTTAGAGCCTGTAACTCGGTGTTAGAGCCTGTAACTCGGTGTTAGAGCCTGTAACTCGGTGTTAGAGCCTGTAACTCGGTGTTAGAGCCTGTAAC'+endf
GT = pref+'TCGGGTTTAGACCTTGTAACTCGGGTTTAGACCTTGTAACTCGGGTTTAGACCTTGTAACTCGGGTTTAGACCTTGTAACTCGGGTTTAGACCTTGTAAC' + endf
TG_T = pref+'TCGGTGTCAGAGCCTGTGACTCGGTGTCAGAGCCTGTGACTCGGTGTCAGAGCCTGTGACTCGGTGTCAGAGCCTGTGACTCGGTGTCAGAGCCTGTGAC'+endf
TR_5 = pref+'TCGGAAGACTTGTCAACTGTTCGGAAGACTTGTCAACTGTTCGGAAGACTTGTCAACTGTTCGGAAGACTTGTCAACTGTTCGGAAGACTTGTCAACTGT'+endf
TRGC = pref+'TCGGACTCCAGAGGTCACCATCGGACTCCAGAGGTCACCATCGGACTCCAGAGGTCACCATCGGACTCCAGAGGTCACCATCGGACTCCAGAGGTCACCA'+endf

energy_sh_tr = dict({ 'TG_1989':0, 'GT':0, 'TG_T':1950, 'TR_5':1900, 'TRGC':1300})  ## the energies are in cal/mol  to convert in KT multiply by 1.689 * 10^-3


### Sequences from the Shrader TE, Gothers paper 1990


TG_1990 = pref+'TCGGTGTTAGAGCCTGTAAC'*5 + endf
ANISO = pref+'TCGGTGTTAGCTTACGTAAC'*5 + endf
TTT = pref+'TCGGTGTTTGTGCCTGTTTC'*5 + endf
NOTA = pref+'TCGGTGAATGAGCCTGATTC'*5 + endf
EXAT = pref+'TCGGTGTTAGCAATCGTAAC'*5 + endf
EXGC = pref+'TCGGTACCGTAGCCTGTAAC'*5 + endf
IAT = pref+'TCGGTGTTAGCAGTCGTAAC'*5 + endf
IGC = pref+'TCGGTACTGTAGCCTGTAAC'*5 + endf
END  = pref+'TCGGTCTTTGTCGGTGTTTC'*5 + endf
ANNA = pref+'TCGGTGTTAGAGCATGTAAC'*5 + endf
three_four = pref+'TCGGTCTAGACCAAGGAGTC'*5 + endf
two_zero = pref+'TCGGCACGTCGAGCTACTCC'*5 + endf


energy_sh_tr_1 = dict({ 'TG_1990':0, 'ANISO':750, 'TTT':900, 
                       'NOTA':1600, 'EXAT':700, 'EXGC':1550, 
                       'IAT':500, 'IGC':1300, 'END':1600, 'ANNA':150, 
                       'three_four':2000, 'two_zero':1550})  ## the energies are in cal/mol  to convert in KT multiply by 1.689 * 10^-3


sequence_dict = {
    'IAT': IAT,
    'IGC': IGC,
    'NOTA': NOTA,
    'TG_1989': TG_1989,
    'TG_T': TG_T,
    'TRGC': TRGC,
    'TR_5': TR_5,
    'TTT': TTT,
    'd1': d1,
    'd2': d2,
    'c1': c1,
    'd3': d3,
    'd4': d4,
    'd5': d5,
    'e1': e1,
    'e2': e2,
    'e3': e3,
    'three_four': three_four,
    'two_zero': two_zero,
    'c2': c2,
    'c3': c3,
    'TG_1990': TG_1990,
    'ANISO': ANISO,
    'ANNA': ANNA,
    'END': END,
    'EXAT': EXAT,
    'EXGC': EXGC,
    'GT': GT
}


def get_reference(seq):
    if seq in ['c1', 'c2', 'c3']:
        return 'c1'
    elif seq in ['d1', 'd2', 'd3', 'd4', 'd5']:
        return 'd1'
    elif seq in ['e1', 'e2', 'e3']:
        return 'e1'
    elif seq in energy_sh_tr:
        return 'TG_1989'
    elif seq in energy_sh_tr_1:
        return 'TG_1990'
    else:
        raise ValueError(f"Unknown sequence: {seq}")


